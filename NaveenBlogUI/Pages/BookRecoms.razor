@page "/bookrecoms"
@inject HttpClient Http
@using NaveenBlogUI.Models
@using NaveenBlogUI.Services
@using MudBlazor
@inject BookRecomService BookRecomService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <MudText Typo="Typo.h4" GutterBottom="true">📚 Book Recommendations</MudText>

    @if (BookRecomService.BookRecoms == null || !BookRecomService.BookRecoms.Any())
    {
        <MudAlert Severity="Severity.Info" Elevation="1">
            <MudText>No recommendations available.</MudText>
        </MudAlert>
    }
    else
    {
        <MudGrid GutterSize="3">
            @foreach (var recom in BookRecomService.BookRecoms)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Style="height: 100%;">
                        <MudCardMedia Image="@recom.BookRecomImgUrl" Alt="Cover" Height="550" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@recom.BookRecomTitle</MudText>
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">@recom.BookRecomAuthor</MudText>
                            <MudText Typo="Typo.body2" Class="mt-2">@recom.BookRecomDesc</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigateToDetails(recom.BookRecomId))">
                                View Details
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    protected override async Task OnInitializedAsync()
    {
        await BookRecomService.LoadRecomAsync();
    }

    void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo($"/bookrecoms/details/{id}");
    }
}

